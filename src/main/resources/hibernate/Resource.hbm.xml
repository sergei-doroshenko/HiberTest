<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping package="acl.domain.resource">
    <class name="acl.domain.resource.Resource" table="resources" entity-name="Resource"
           dynamic-insert="true" dynamic-update="true" >

        <id name="id" type="java.lang.Long" column="id">
            <generator class="native"/>
        </id>

        <property name="firstName" type="java.lang.String" column="first_name"/>
        <property name="lastName" type="java.lang.String" column="last_name"/>
        <property name="baseCost" type="java.lang.Double" column="base_cost"/>
        <property name="currencyId" type="java.lang.Long" column="currency_id"/>

        <!--<set name="skills" inverse="true" cascade="save-update" lazy="true" fetch="select">
            <key column="RES_ID" not-null="true" foreign-key="ID"/>
            <one-to-many entity-name="Skill"/>
        </set>-->

    </class>

    <class name="acl.domain.resource.Resource2"
           table="RESOURCE"
           entity-name="Resource_Full"
           dynamic-insert="true"
           dynamic-update="true"
           batch-size="100">

        <cache usage="read-write"/>

        <id name="id" type="java.lang.Long" column="ID" unsaved-value="null">
            <generator class="native"/>
        </id>

        <property name="login" type="java.lang.String" column="LOGIN" unique="true"/>
        <property name="firstName" type="java.lang.String" column="FIRST_NAME" not-null="true"/>
        <property name="lastName" type="java.lang.String" column="LAST_NAME" not-null="true"/>
        <property name="nativeName" type="java.lang.String" column="NATIVE_NAME"/>
        <property name="active" type="boolean" column="ACTIVE"/>
        <property name="NWOProhibited" type="java.lang.Boolean" column="nwo_prohibited"  />
        <property name="sex" type="boolean" column="SEX"/>
        <property name="email" type="java.lang.String" column="EMAIL"/>

        <many-to-one name="empCurrency"
                     column="EMP_CURRENCY"
                     entity-name="Currency_Full"
                     not-null="true"
                     foreign-key="resource_emp_currency_fkey">
        </many-to-one>

        <property name="notifyUnfilledTs" type="boolean" column="NOTIFY_UNFILLED_TS"/>

        <bag name="skills" inverse="true" cascade="all">
            <key column="RESOURCE_ID" foreign-key="RESOURCE_SKILL_FK"/>
            <one-to-many entity-name="Skill_Full"/>
        </bag>
    </class>

    <sql-query name="resource.cost.changes">
        <![CDATA[
        SELECT
          a.resourceId,
          r.last_name || ' ' || r.first_name AS resourceName,
          a.startDate,
          a.baseCost,
          a.exchangeRate,
          c.letter_code AS currency,
          a.changeType
        FROM (
          SELECT
            rc.resource_id as resourceId,
            rc.start_date as startDate,
            rc.base_cost as baseCost,
            rc.currency_id,
            ex.exchange_rate as exchangeRate,
            0 as changeType
          FROM resource_cost rc
          JOIN exchange_currency_rates ex ON ex.currency_from=rc.currency_id AND date=(
            SELECT max(date) FROM exchange_currency_rates WHERE currency_from=rc.currency_id AND date<=rc.start_date
          )
          UNION ALL
          SELECT
            rc.resource_id as resourceId,
            ex.date AS startDate,
            rc.base_cost as baseCost,
            rc.currency_id,
            ex.exchange_rate as exchangeRate,
            1 as changeType
          FROM exchange_currency_rates ex
          JOIN resource_cost rc ON rc.currency_id = ex.currency_from AND rc.start_date = (
            SELECT max(start_date) FROM resource_cost WHERE start_date<=ex.date AND resource_id = rc.resource_id
          ) AND NOT rc.id=COALESCE((SELECT id FROM resource_cost WHERE resource_id=rc.resource_id AND start_date=ex.date AND currency_id=ex.currency_from), 0)
          WHERE rc.currency_id=ex.currency_from
        ) a
        LEFT JOIN resource r ON r.id=a.resourceId
        LEFT JOIN currency c ON c.id=a.currency_id
        WHERE
          a.startDate BETWEEN :fromDate AND :toDate
          AND a.resourceId IN (1, 2)
        ORDER BY
          resourceName,
          a.startDate;
        ]]>
    </sql-query>
</hibernate-mapping>